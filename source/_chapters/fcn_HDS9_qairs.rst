.. include:: <isonum.txt>
.. include:: ../_static/figures.txt
.. include:: ../_static/fcn/qairs/figures.txt

Air Quantities Calculation
--------------------------

.. sidebar:: The Air Quantity
    :subtitle: Controlling the torque and the fuelling

    The air quantities calculation is the fundamental function for the engine torque control.

    |qairs_010|

Preface: Mass Air Flow = Torque = Fuel demand
#############################################

The torque generated by an Otto cycle engine is directly proportional the the air charge intaked by the cylinders. The control of the torque is done by controlling the air charge. In modern Otto cycle engine the air charge is achieved by means of controlling an Electronic Throttle Body. Most of the target application of HDS ECM are turbocharged engine where the maximum amount of available air to be intaked is controlled by the wastegate valve.

Briefly, the full control of the generated torque on HDS controller is done by controlling the throttle and the wastegate actuators.

Once achieved the desired torque, the task of the controller is to keep the Air Fue ratio at the target value. Normally they are stoichiometric combustion based application with a Three Way Catalyst as aftertreatment device. So the "measure" of the real quantity of air intaked is the base for calculate the right amount of fuel to be delivered by injectors.

Finally, since the air quantity measure/calculation is a fundamental function for engine work, the function provides some safety relevant feature such as the one that permit to continue working even in case some basic sensors / actuators are broken.

One air = five airs = two airs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Since the Intaked Air Quantity (one air) measure / estimation is a crucial function for engine work, the HDS ECM provides 5 different methods for, mainly, calculate (estimate) or measure the Air Mass Flow in [:math:`\small \frac{kg}{h}`] (5 airs).

    * The **Speed Density** model Air Mass Flow estimation based mainly on the Intake Manifold Air Density f(measured pressure, measured temperature) and engine speed.

    * The **Alpha-n** model Air Mass Flow estimation based mainly on the throttle opening and the engine speed

    * The **Predictor** model Air Mass Flow estimation based mainly on the Intake Manifold Air Density f( forecast pressure, temperature) and engine speed.

    * The **Measured** Air Mass Flow based on the mesaure coming from the Mass Air Flow sensor.

Later we will go deeply inside each one to describe the calibration process. Now is important to highlight that the safe operation of HDS need to setup properly the correct calculation of at **least two Air Quantities**  (2 airs).

The air flows configuration selectors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tip::

    The two air quantities used for respectively calculate the injection quantity (and provide inputs to many other functions) and provide a recovery value in case of primary sensor fault are  ``asAirMain`` [:math:`\small \frac{kg}{h}`] and ``asAirSec`` [:math:`\small \frac{kg}{h}`] .

    By means of selectors is possible to use some combinations of the above introduced Air Quantities estimation to assign every TDC their values to   ``asAirMain``  and ``asAirSec`` .

    The two selectors are:

    1. :guilabel:`asAIR_SENS_PRI` : defines the main configuration among available estimation / measure functions

    2. :guilabel:`asMOD_PRE_EN` : create a subset of possible configurations introducing or not the usage of the Intake Manifold Pressure Model (predictor).

    .. warning::

        The choice among configurations should be done after having read and understood all following chapters that describe for each input the calibration needed.

    Following table enumerates with also some short comments the available combinations:

    .. list-table:: QAirs Estimations Available Configurations
        :widths: 12, 12,  14, 14 , 50
        :header-rows: 1

        * - :guilabel:`asAIR_SENS_PRI`
          - :guilabel:`asMOD_PRE_EN`
          - ``asAirMain`` =
          - ``asAirSec`` =
          - Note
        * - 1
          - 0
          - ``asQahMapSD_Rec``
          - ``asQahAlphaN``
          - STD configuration: **T/MAP is the Main** sensor
        * - 2
          - 0
          - ``asQahAlphaN``
          - ``asQahMapSD_Rec``
          - Alpha / N configuration: **T/MAP is the Recovery** sensor
        * - 3
          - 0
          - ``zsQAirDebim``
          - ``asQahMapSD_Rec``
          - Debimeter configuration: **T/MAP is the Recovery** sensor
        * - 1
          - 1
          - ``asQahPreSD_Rec``
          - ``asQahAlphaNPre``
          - STD configuration: **T/MAP is the Main** sensor
        * - 2
          - 1
          - ``asQahAlphaNPre``
          - ``asQahPreSD_Rec``
          - Alpha / N configuration: **T/MAP is the Recovery** sensor
        * - 3
          - 0
          - ``zsQAirDebim``
          - ``asQahPreSD_Rec``
          - Debimeter configuration: **T/MAP is the Recovery** sensor


From above table is possible to see that the inputs for the combinations are:

    a. ``asQahMapSD_Rec`` : coming from Speed Density calculation based on the measure of pressure and temperature of Air inside the intake manifold;

    b. ``asQahAlphaN`` : coming from the Air Flow model in function of  the Throttle opening and Engine speed;

    c. ``zsQAirDebim`` : coming from the measure of MAF sensor;

    d. ``asQahPreSD_Rec`` : coming from Speed Density calculation based on the Predicted Pressure and the measured temperature of Air inside the intake manifold;

    e.  ``asQahAlphaNPre`` : coming from the Air Flow model in function of  the Throttle opening due to predictor and Engine speed.

For each of them we will explain how to calibrate models in order to fit in the best way the real Air Mass Flow Intaked by engine.


The RefenceAir - *RefAir*
^^^^^^^^^^^^^^^^^^^^^^^^^

.. warning::

    During all next chapters we will refer to **ReferenceAir** ( abbreviation *RefAir* ) [:math:`\small \frac{kg}{h}`] as the measured real Mass Air Flow coming from the best instrument available. The most comfortable way to get a **ReferenceAir** is the usage of the MAF sensor connected to ECM. In this way the value of  ``zsQAirDebim`` can be always available inside the development system. Otherwise the symbols to be identified must be compared with external measurement, leading to an extra effort for keeping together different monitors or display.



Calibration methodology
#######################

As seen in the previous paragraphs, the estimation / measurement of the flow rate of the air drawn in by the engine is a complex system that includes several subsystems that can also influence each other.
The stability of the entire system is guaranteed by the physical modeling of the algorithms that describe the phenomena that occur in the engine to be controlled.
Due to the presence of interactions between subsystems, it is necessary to face the calibration of the models, that is of the subsystems, with an iterative process that leads to convergence.
Without for the moment entering into the recommended methodologies, in general we can certainly draw up a few simple rules to always keep in mind in order to obtain adequate precision in acceptable times:

    - always have the precise value of the measured air quantity available and consider it as an absolute reference, always the same, for all subsystems. On the other hand, the air sucked in by the engine at a certain operating point is in fact always only one.

    - be careful to calibrate the individual models by accurately assessing the accuracy of the same without worrying about the impact on the other models.

    - always respect the chain of inputs - outputs in order to calibrate a model when its inputs are stable

    - repeat a calibration sequence until the expected accuracy / stability is achieved

The Top-Down Priority Approach
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the process of calibration of Air Quantity Management the most robust approach is to define the calibration of the sub-functions in a step by step order that is from the highest priority to the lowest.

Top-down order of the sub-functions of the intake air flow management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. sidebar:: The hierarchical scheme

    The figure shows the very draft hierarchical scheme of the most to less priority models (here tables) to be calibrated for Air Quantity Management consistent calibration
    |qairs_030|

#. **Controlling the target torque to be generated by the engine** - this is the highest priority in the air quantities management. It achieved by means of convert the troque demand in a certain quantity of air flow;

#. **Controlling the real torque output** - Once a target torque became a target quantity of Mass Air Flow, the throttle model must ensure a consistent actuation of the target;

#. **Estimate accurately the air flow rate** - This task is important to ensure a good combustion control in all environmental conditions;

#. **Ensure a safe recovery in case of primary sensor failure** - Is possible to ensure an estimation of the air flow rate without the signal coming from the main sensor (usually the T/MAP sensor measuring the pressure and temperature of the air in intake manifold). This function ensure the limp home in case of failure of primary sensor;

#. **Improve the response of the air flow estimation** - In some case a faster response of the estimation of air flow is needed to achieve an higher accuracy of fuel delivery under special condition, mainly in transient mode.


.. warning::
    The first two items in the above list are not properly part of the Software modules and submodules of the Air Quantity Management. In fact the first item, the target of air flow is the joining point within the Torque Manager Strategy and the Throttle Management where the second item is located. Nevertheless the requirements of make all models converging imposes to approach the Air Quantity Calibration having a continuous outlook, assessment and refinement of the global control chain.

Air Quantity Target
~~~~~~~~~~~~~~~~~~~

.. tip::

    The Air Quantity Target in a certain engine working point can be defined as the amount of air needed by the engine to output a desired performance measured at dyno i.e. the torque [n*m].  Of course the real torque will be function of more parameters than the Intake Air MAss Flow, e.g. the Air Fuel Ratio and the Spark Advance. We should assume that the other parameters are also already optimised at least 90%. The air target is also frequently referred as the Air Request, meaning the amount of air that is requested by the engine to generate the torque.

    The air quantity target to be identified during the calibration is the the ``hsQAir_Request`` symbol calculated as follow:

    .. math::

        \small hsQAir\_Request\ =\ esQAir\_Request\ *\ hsQAir\_Req\_Corr\ = [ \frac{kg}{h} ]


        \label {hsQAir_Request calculation}

    Where:

        * ``hsQAir_Req_Corr`` interpolated on the calibration table :guilabel:`htQAIR_REQ_CORR` f( ``bsRPM`` , ``qsLamObtFin``) - is the coefficient for correct the air request (target) in order to adjust the torque when running at lambda <> 1

        * ``esQAir_Request`` comes from a value ``esCmu2qairObj`` interpolated on the calibration table :guilabel:`etCMU2QAIR_OBJ` f( ``bsRPM`` , ``esCmuAirLamAdTst``) saturated at high and low sides respectively by the symbols ``esQairReqSup`` and ``esQairReqInf`` - Both saturation symbols are explained in the dedicated chapter

    .. TODO: to write the chapter for Qiar request saturation esQairReqSup and esQairReqInf

        Where:

            *     ``esCmuAirLamAdTst`` is the torque [N*m] request calculated by the torque manager function.

    The figure is an example of the :guilabel:`htQAIR_REQ_CORR` calibration table. It comes from a 6.4 liter 6 cylinders engine.

    |qairs_040|

    Is possible to observe the almost linear surface proportional to the product of engine speed and torque, hence the power outputted from the engine. Mechanical and combustion efficiencies (due to spark advance not optimal for torque) can give some not linear behaviour on the trends.Take care of calibrate the breakpoints of the table accordingly to the expected engine speed and performance ranges.

    .. warning::

        The Y axis is represented by the torque, the useful torque, so the torque the can be measured at engine output connected to the dyno.  ``esCmuAirLamAdTst`` must always be fitted to the real value in N*m of the torque read at engine dyno.

        This identification represent the first convergence of the highest priority model.

    The value ``esCmu2qairObj`` that become ``esQAir_Request`` after saturation inserted in the table must be conventionally the air quantity needed to get the corresponding torque with stoichiometric combustion. The air quantity correction when the same torque must be reached with lean combustion must be included in :guilabel:`htQAIR_REQ_CORR` table that take into account the final value of requested lambda.

    The calibration of the table consist in identify the right value of ``esQAir_Request``, equal to ``hsQAir_Request`` in stoichiometric combustion mode, at a certain engine speed and certain request of ``esCmuAirLamAdTst``. During this calibration phase check that both following conditions are correct:

    * The measured torque at engine dyno is equal to ``esCmuAirLamAdTst``

    * The ``hsQAir_Request`` is equal to  **ReferenceAir**

    .. warning::

        The second condition must be checked continuously. In case the **ReferenceAir** is different from ``hsQAir_Request`` the throttle model must be refined (see next paragraph) in order to make the triad (``esCmuAirLamAdTst``, **ReferenceAir** , ``hsQAir_Request``) consistent. In other words the measured torque must be equal to ``esCmuAirLamAdTst`` while the **ReferenceAir** must be equal to ``hsQAir_Request``.

    If the measured ``zsQAirDebim`` is available as **ReferenceAir** can be useful to use the selector :guilabel:`asAIR_SENS_PRI` set to 3 so helping the fuel control since the measured value of Air Quantity s used for controlling the fuel amount delivered by injectors.

The Real Air Flow or The Throttle Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The second model in the top-down hierarchical order is the throttle one. The calibration target of this model is to ensure that the widest range of the throttle operating conditions is accurate enough to let the engine control system to control accurately the requested torque. Accurately as a +/- 2.5 % (e.g. +/- 25 N*m on 1000 requested). Of course the accuracy and repeatability of the dyno load cell measure chain plays an important role. Be sure that your are measuring with an adequate accuracy the torque! Otherwise at least use the from top of from bottom always approach to get rid of load cell measure hysteresis.

.. tip::

    Nevertheless the throttle model is not properly included in the Air Quantity Management module, during the calibration, it must be calibrated / refined during the Air Quantity Management calibration phase. **It is mandatory to ensure the equality between the target and the actual air intake flow** .

    The model is represented essentially by the calibration table :guilabel:`htPOBJ_CARAT_THR` f( ``hsBeta`` , *volumetric target air flow* ) which output ``hsPobjCaratThr`` is the target percentage opening of the throttle [%].

    |qairs_050|

    The table inputs are ``hsBeta`` , which represents from a physical point of view the relationship between the air pressures downstream and upstream of the throttle valve, and a value that is not available in the symbol library of HDS,  which represents the volume of air flow that you want to pass by the throttle valve.

    ``hsBeta`` is calculated as :

    .. math:: \small \ hsBeta\ =\ \frac{hsPcollReqDef}{zsPBoost}

    where:

    * ``zsPBoost`` is the measured pressure upstream the throttle valve

    * ``hsPcollReqDef`` is the estimated target pressure in intake manifold, downstream the throttle valve, calculated as follow:

        .. math::

            \small hsPcollReqDef\ =\ { hsGAIN\_NCYL\_VCC\ *\ hsPcollReRefTst }\ +\ { \frac{ \max{(\ zsPAtm,\ asPsca\ )}}{asRappComp}}

        where:

            * :guilabel:`hsGAIN_NCYL_VCC` is an empirical calibration multiplier factor to be identified in a way that in steady state the resulting ``hsPcollReqDef`` is as much as possible equal to ``zsMap`` .

            * ``zsPAtm`` is the measured atmospheric pressure in [mbar]

            * ``asPsca`` is the exhaust absolute pressure in [mbar] interpolated in :guilabel:`atPRE_SCARICO` f( ``bsRPM`` , ``zsMap`` ).

            .. warning::

                The calibration of the table must be contextual to the throttle body model and speed density function. Always verify that the exhaust pressure measured at test bed is equal to ``asPsca``.

            * ``asRappComp`` is equal to :guilabel:`asRAPP_COMPRES` calibration symbol representing the geometric compression ratio of the engine.

            * ``hsPcollReRefTst`` is the theoretical target pressure in [mbar] of the air in intake manifold calculated as follow:

            .. math::

                \small hsPcollReRefTst\ =\ \frac{\frac{\frac{hsQAir\_Request * 48426}{\frac{asNCyl}{2}}}{asVCylEff}*\ hsTair\_KelvinTst}{bsRPM}

            where:

                * ``hsQAir_Request`` is the corrected requested (target) mass air flow [kg/h]

                * 48426 is a pure gain number as the result of (1/60) * Ri * (10000) for physical scaling purposes

                * ``asVCylEff`` [cm^3] is the unit displacement coming from calibration symbol :guilabel:`asVCylEff` [m^3] multiplied by a 10^6 factor. It can be fixed with :guilabel:`hfVCYL_RIF` fix.

                * ``hsTair_KelvinTst`` is the absolute temperature of air in intake manifold [K] calculated as ``zsTAir`` + 273.

                * ``bsRPM`` is the well known actual engine speed in [rpm]

    **volumetric target air flow** is generally speaking the ``hsQAir_Request`` multiplied by the Specific Volume of the intaked air at the condition of ``zsPBoost`` and ``zsTAir``. More precisely is calculated as follow:

    .. math::

        \small Volumetric\ Target\ Air\ Flow\ =\  ( hsQAir\_Request\ +\  hsQAIR\_OFFSET\ ) *\ hsPtairGainThr

    where:

        * ``hsQAir_Request`` is the corrected requested (target) mass air flow [kg/h]

        * :guilabel:`hsQAIR_OFFSET` is a calibration adjusting offset to be empirically determined for the convergence. It is set as default to -10 [kg/h]

        * ``hsPtairGainThr`` is the Specific Volume in [m^3 / kg] interpolated in :guilabel:`htPTAIR_GAIN_THR` calibration table f( ``zsPBoost`` , ``zsTAir``). The table comes pre-calibrated with standard figures for Air and it doesn't need to be empirically calibrated.

Estimate the Mass Air Flow - Speed Density Strategy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here we are! After having ensured a safe, reliable, accurate torque control now is time to think to an efficient combustion. The most important parameter to be controlled in order to ensure an optimal combustion is the Air / Fuel Ratio. That means basically to be able to rely on a measure / estimate of the quantity of air sucked so as to be able to calculate accordingly a corresponding amount of fuel that must be injected. This operation must be repeated for each new need for injection that for a MPI system means repeat the calculation for each combustion phase. The term used from an engine control strategy standpoint is at each TDC. HDS is basically using a very common and popular strategy called Speed Density.

The general equation of speed density
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The transfer function of Speed Density calculation is the following:

    .. math::

        \tiny asQahSpeedDensity\ =\ asQac\ *\ \frac{bsRPM\ *\ 60\ *\ asNCyl}{2\ *\ 10^6}\ = [ \frac{kg}{h} ]

        \tiny \text {where:}

        \tiny asQac\ =\ ((asQmix -\ \frac{wsMassFlowEGRObj}{3600})\ *\  asTimePhase\ *\ 10^6 )\ -\ qsQInj =\ [\frac{mg}{cycle * cylinder}]

        \tiny \text {where:}

        \tiny asQmix = asQaspDivPcoll\ *\ asPaspTmp\ *\ 100

        \tiny \text {where:}

        \tiny asQaspDivPcoll = \frac{ EffectiveVolume }{ \frac{EffectiveVolume}{ asResAspir} +   \frac{asTimePhase}{asPmix}*asTValv*8.31 }

        \tiny \text {where:}

        \tiny EffectiveVolume\ =\ asVEFF\ *\ asCORR\_VEFF + asVC

        \label {SD calculation}


.. note::

    The transfer function is generalized and is used to calculate different Air Quantities depending from the inputs provided in the entry point :math:` \small asPasp` .

    .. table::

        +-------------------------+-----------------------+----------------------------------------------------------+
        | ``asPasp`` input        |  ``asQah`` output     | Note                                                     |
        +=========================+=======================+==========================================================+
        | ``asPre``               |  ``asQahPreSD``       | Intake manifold pressure coming from pressure predictor. |
        +-------------------------+-----------------------+----------------------------------------------------------+
        | ``zsMap``               |  ``asQahMapSD``       | Intake manifold pressure measure by pressure sensor.     |
        +-------------------------+-----------------------+----------------------------------------------------------+

    It possible to figure out that at TDC task the function is executed twice passing the two different inputs as intake manifold pressure and consequently the output value is assigned to the two different corresponding output.



.. warning::

    Recovery ``asQahMapSD_Rec``

    a. **dsR42** : Replace the extimated air mass flow obtained with SpeedDensity model ``asQahMapSD_Rec`` based on the value of the intake manifold pressure sensor (zsMap):

        1. With the value predicted by pressure estimator, if :guilabel:`asPOBJ_REC_EN` = 1

        2. With the value predicted by the AlphaN estimator, if :guilabel:`asPOBJ_REC_EN` = 0

    b. **dsR52** : Disable the throttle driver. Consequently, it is necessary to replace the estimated air mass flow obtained with SpeedDensity model based on the predicted air ``asQahPreSD_Rec`` (``asPre``) with the value based on the real sensor value (``zsMap``).


.. note::

    Herein after ``asQahMapSD_Rec`` will be called simply ``asQahMapSD`` .

Submodels of speed density model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The complete speed density model includes independent sub-models. If not properly included, at least intended to provide some input that may affect the general accuracy of the Speed Density function outputs. Before the calibration of wide and time consuming tables take care of checking the proper setting and working of the following sub-models. As already said many parameters included may be affected each others. **Verify continuously the correct identification / calibration of sub-models** in a iterative converging process.

.. topic:: Pressure at the intake valve estimation

    The accurate estimation of the real quantity of Air Intaked by Inlet Valve needs the accurate estimation of the local value of the pressure close to the valve itself.

    .. tip::

        The pressure at Inlet Valve ``asPasp`` is calculated as follow:

        .. math::

            \small asPasp\ =\ bsPressure\ -\ (\ \frac{asPsca}{asRappComp}\ *\ \frac{asTValv}{asTempScarico})

        Where:

        * ``asPasp`` is the estimated pressure close the inlet valve [mbar]

        * *bsPressure* is only a placeholder standing for both ``asPre`` and ``zsMap`` that, as said before, are both provided to the function called twice every TDC for concur to the calculation of respectively ``asQahPreSD`` and ``asQahMapSD``

        * ``asPsca`` is the exhaust absolute pressure in [mbar] interpolated in :guilabel:`atPRE_SCARICO` f( ``bsRPM`` , *bsPressure* ).

        * ``asTempScarico`` is the exhaust temperature [deg K] interpolated in :guilabel:`atTEMP_SCARICO` f( ``bsRPM`` , *bsPressure* ).

        * ``asTValv`` is the estimated temperature of Air [deg K] close to the inlet valve (see topic below)

        .. warning::

            :guilabel:`atPRE_SCARICO` and :guilabel:`atTEMP_SCARICO` calibrations may be affected by many parameters such as Spark Advance calibration, Boost Pressure setting, Lambda Target and so on. The two tables should be reviewed and refined when the above listed parameters have been frozen.

.. topic:: Temperature at the intake valve estimation

    The Air Temperature at Inlet Valve value is identified by the signal ``asTValv`` in [°K]. The table representing the delta temperature between the coolant temperature (``zsTh2o``) and the temperature of inlet value is represented by the 1D-map :guilabel:`avOFF_TVALV` (expressed in [°C]). The output signal is ``asOffTvalv``. As usual a FIX may be used to by-pass this signal and the table extrapolation (:guilabel:`afOFF_TVALVE`).

    The transfer function is:

    .. math::

        \small asTValv\ =\ 273\ + (\ asOffTvalv + \frac{zsTAir + zsTh2o}{2}\ )

    .. tip::

        This kind of approach allows to use an instrumented engine with temperature sensors fitted very close to inlet valves in order to measure the gap between the average temperature (coming from coolant and intake manifold sensors) and the ones acquired at the inlet valves. This method allow the identification of the value to be calibrated into :guilabel:`avOFF_TVALV`.

.. topic:: Duration of the intake phase


    The duration of intake phase ``asTimePhase`` is affecting the global engine intake efficiency. The Speed density model take into account the duration of intake phase.

    .. tip::

        It is calculated as follow:

        .. math::

            \small asTimePhase\ =\ \frac{asF1\_F2}{bsRPM * 6 }

        where:

        *   ``asTimePhase`` [s] is the output of the intale phase duration sub-model

        * :guilabel:`asF1_F2` [eng deg] is the opening period in engine degrees of the Intake Phase. Typically coming from the engine valve timing diagram is the datum of the Inlet valve opening period.

        * ``bsRPM`` is the actual engine speed in [rpm]

        * 6 is a conversion factor from revolution per minute to degrees per second :math:`\frac{360 [\frac{deg}{rev}]}{  60 [\frac{sec}{min}]}`

.. topic:: Molar mass of the mixture (air/fuel)

    The symbol ``asPmix`` represents the molar mass of the mixture (air/fuel) entering into the cylinder. Speed density function must take care that the density of the media entering the cylinder is affected by the gas mix i.e. air and fuel.

    .. tip::

        The molar mass ``asPmix`` is calculated as follow:

        .. math::

            \small\ asPmix\ =\ \frac{[(qsAFStechio * qsLamObtFin)*0.02897]+0.016}{1+(qsAFStechio * qsLamObtFin)}

        where:

        * ``qsAFStechio`` is the actual Stoichiometry of the fuel Stoichiometric AFR (Air / Fuel Ratio). The value can can be managed in calibration with followings:

            * :guilabel:`qsAFSTECHIO_INIT` - is the initial value of reference fuel AFR when the first key on is performed on a ECU

            * :guilabel:`qsAFSTECHIO_MIN` and :guilabel:`qsAFSTECHIO_MAX` are respectively the minimum and the maximum values admitted for the self adaptation of the ``qsAFStechio``.

.. TODO: Write the chapter for ``qsAFStechio`` self adaptation.

            * :guilabel:`qfAFSTECHIO` fix calibration symbol can be used during calibration development in order to avoid any ``qsAFStechio`` variation from the nominal preferred value.




``asQahMapSD``  and ``asQahPreSD`` calibration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. tip::

    The symbols ``asQahMapSD``  and ``asQahPreSD`` are calculated every TDC and can be fixed by means of :guilabel:`afQAH_MAP_SD`  and :guilabel:`afQAH_PRE_SD` respectively fix calibration symbols.

    Referring to the general Speed Density equation is possible to find hereby the calibration instructions to get and accurate calculation of the value.

    .. note:: **The accuracy of Speed Density estimation**

        Nevertheless the calculation chain of speed density has a numerical accuracy much higher, we define the **accuracy of the calibration** as the percentage deviation between the estimated value and of Air Mass Flow and the measured value. By avoiding going into the specious argument of the accuracy of the measurement of the air flow rate which depends on the system used, and therefore assuming that the measured air flow rate is undoubtedly the reference flow rate ( **ReferenceAir** ), we can say that the accuracy of the estimate of the flow rate of the air by calculating the Speed Density (SD) is equal to :math:`\small Accuracy_{SD}\ =\ \frac{ asQahSpeedDensity - ReferenceAir } {ReferenceAir}\ *\ 100`.

        Considering that in a normal calibration procedure of a generic engine, we operate on a prototype engine constructed in such a way as to represent the sample with all the tolerances of the components at the center band value and that therefore the subsequent production phase will be distributed evenly around it, we can consider the following tolerance limits in the calibration of the speed density function:

        - **Prototype** -> tolerance allowed +/- 5%

        - **Pre-series sample** -> allowed tolerance +/- 7.5%

        - **Standard production sample** -> tolerance allowed +/- 10%

        .. warning::

            In case during :term:`COP` checks the tolerance goes out from the limits, consider to review the calibration in order to reset the deviations. If the tolerances cannot be accomplished by the production process, consider to review some engine part or some procedure of the process. In any case the HDS system can recover by means of the closed loop AFR control and self adaptation up to a 20% deviation. But during the preliminary phases when the self adaptation is still converging to final value some lack of performances or emission control may be found.

    - ``asNCyl`` symbol is set by the calibration symbol :guilabel:`asNUMCYL` and represents the number of cylinders of the engine. It can assume tha values of 4, 6, 8. Most of time the deafult value is already set properly since HDS sw versions are engine's cylinder number depending.

    - :guilabel:`asVEFF` is a calibration symbol in  [:math:`\small m^3`] for calibrate the engine's single cylinder displacement aka *swept volume*. It can be calculated by means of cylinder bore and stroke with the elementary geometric displacement of a cylinder :math:`\small asVEFF\ =\ \pi\ *\ \frac{Cyl.Bore^2 [m]}{4} * Stroke [m]`.

        .. warning:: The accuracy of :guilabel:`asVEFF` since is expressed in cubic meter is not high. Be aware that the accurate value may not be inputted properly. Please choose the closest value that fits your case. There isn't any preferred approximation.

    - :guilabel:`asCORR_VEFF` is a calibration symbol that is multiplied by :guilabel:`asVEFF` to correct the second parameter. It can be used to recover some accuracy lost in :guilabel:`asVEFF` (:math:`\small\ 1*10^{-4}\ lsb` ) or just left to its deafult value 1.0 and used in a second moment for some empiric best fit of the SD function.

    |qairs_020|

    - :guilabel:`asVC` is a calibration symbol in  [:math:`\small m^3`] for calibrate the engine's single cylinder dead volume aka *clearance volume*. It must be known as an engine characteristics or can be determined using a oil volume difference measure as the procedure used to measure the compression ratio of a cylinder `How to Accurately Measure Your Compression Ratio <https://grassrootsmotorsports.com/articles/how-accurately-measure-your-compression-ratio/>`_ or by measuring the engine geometry as per `How to Determine Compression Ratio <https://www.yourmechanic.com/article/how-to-calculate-compression-ratio>`_.

        .. warning:: The accuracy of :guilabel:`asVC` since is expressed in cubic meter is not high. Be aware that the accurate value may not be inputted properly. Please choose the closest value that fits your case. There isn't any preferred approximation.

    - ``asResAspir`` is a complex parameter in [:math:`\small\ \frac{1}{s*m}`] proportional to the intake efficiency. It is interpolated from the :guilabel:`atRES_ASPIR` table or :guilabel:`atRES_ASPIRx` tables system.

.. topic:: Cylinder by cylinder or single atRES_ASPIR?

    Before proceed with :guilabel:`atRES_ASPIR` table/s calibration you must decide the approach to be used for this task. HDS provides an option for calibrate the intake efficiency cylinder by cylinder. This option can be adopted in case of heavy air charge load difference among the cylinders. The option let the calibrator to individually calibrate the estimated air charge for each cylinder. The choice of this option introduces a big overhead of time for calibration and engine instrumentation. It is possible to calibrate :guilabel:`atRES_ASPIRx` if all cylinder's exhaust duct have their own wide band oxygen sensor.

    .. tip::

        The option can be choose using the :guilabel:`afCUR_CYL_TST` fix calibration symbol. :guilabel:`afCUR_CYL_TST` **ENABLED** and set to 0 (zero) impose the usage of the single :guilabel:`atRES_ASPIR` while :guilabel:`afCUR_CYL_TST` **ENABLED** (don't care about the value) imposes the usage of the complete set of :guilabel:`atRES_ASPIRx` . For example on a 8 cylinder engine the available tables :guilabel:`atRES_ASPIRx` are :guilabel:`atRES_ASPIR1`, :guilabel:`atRES_ASPIR2`, :guilabel:`atRES_ASPIR2`, :guilabel:`atRES_ASPIR3`, :guilabel:`atRES_ASPIR4`, :guilabel:`atRES_ASPIR5`, :guilabel:`atRES_ASPIR6`, :guilabel:`atRES_ASPIR7` and :guilabel:`atRES_ASPIR8`.

        .. warning::

            **All atRES_ASPIR and atRES_ASPIRx share the same set of breakpoints.** All of them are interpolated f(``bsRPM``, (``asPre``, ``zsMap`` ). Each TDC the table to be interpolated is selected by means of  ``bsCurCyl`` + 1 value. The :guilabel:`afCUR_CYL_TST` fix calibration symbol fixes the value coming from ``bsCurCyl``. The single  :guilabel:`atRES_ASPIR` is selected if  (``bsCurCyl`` + 1 ) is fixed to 0 by means of  :guilabel:`afCUR_CYL_TST` **ENABLED** and set to 0 (zero).


























